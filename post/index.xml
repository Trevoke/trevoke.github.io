<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Seven steps</title>
    <link>http://blog.trevoke.net/post/</link>
    <description>Recent content in Posts on Seven steps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/trevoke&#34;&gt;Aldric Giacomoni&lt;/a&gt; 2017-2019</copyright>
    <lastBuildDate>Thu, 06 Jun 2019 17:43:39 -0400</lastBuildDate>
    
	<atom:link href="http://blog.trevoke.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The first step in learning any new programming language</title>
      <link>http://blog.trevoke.net/post/learn-a-new-prog/</link>
      <pubDate>Thu, 06 Jun 2019 17:43:39 -0400</pubDate>
      
      <guid>http://blog.trevoke.net/post/learn-a-new-prog/</guid>
      <description>Part of being a professional programmer is learning new languages (seriously â€” past a certain point, you should be fluent in a couple of languages, but that&#39;s another blog post), and part of being a good programmer is being effective at doing so. The very first step in learning a new language is being able to write some code with it. Further steps usually involve mastering the syntax as well as whatever new paradigms the language may throw at you, BUT!</description>
    </item>
    
    <item>
      <title>      Maintainability Is Relative</title>
      <link>http://blog.trevoke.net/post/maintainability-is-relative/</link>
      <pubDate>Sun, 23 Oct 2016 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/maintainability-is-relative/</guid>
      <description>I just found a great example of the variability of the need of creating maintainable code.
Somewhere around 2006, I created a script that posts to the Livejournal community daily_tao a new chapter of the Tao Te Ching every day. Today in 2016, I had a need to look for the script, the second time in maybe the last eight years that I had to look at it.
I temporarily wasn&#39;t sure of where that script was.</description>
    </item>
    
    <item>
      <title>      Benefits of a rapid test suite</title>
      <link>http://blog.trevoke.net/post/benefits-of-a-rapid-test-suite/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/benefits-of-a-rapid-test-suite/</guid>
      <description>The value of a rapid test suite Developers and codebases The bare minimum required of a developer is &#34;make this change without breaking anything else in the code&#34;, and if you&#39;ve been around software development for any period of time, you know that&#39;s harder than it seems.
Most of the time that a developer spends on any given codebase is spent on an existing codebase, adding new features on top of existing code.</description>
    </item>
    
    <item>
      <title>      Why Elixir is the next Great Tech</title>
      <link>http://blog.trevoke.net/post/elixir/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/elixir/</guid>
      <description>Elixir, because:  I think of Elixir as an idea whose time has come; or rather, a great gathering of ideas. Erlang has solved the problem of distributed computing (and therefore, of concurrency) decades ago, and now concurrency is a very desirable tool, as the amount of data we crunch regularly has increased exponentially. TDD has brought a more functional approach to a lot code, and that is the paradigm Elixir espouses.</description>
    </item>
    
    <item>
      <title>      The value of estimates for a team</title>
      <link>http://blog.trevoke.net/post/the-value-of-estimates-for-a-team/</link>
      <pubDate>Thu, 02 Apr 2015 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/the-value-of-estimates-for-a-team/</guid>
      <description>What this entry is and is not about This entry talks about estimates in a relatively perfect world. This entry does not talk about problems that teams run into when dealing with estimates in a world where estimates are often misunderstood and where parties try to pile up additional meanings and metrics to estimates.
Why talk about estimating at all Estimating work to be done before it is done. Great if you know what the work is.</description>
    </item>
    
    <item>
      <title>      Lesson from emacs: keep data easy to manipulate and easy to present</title>
      <link>http://blog.trevoke.net/post/separate-manipulation-from-presentation/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/separate-manipulation-from-presentation/</guid>
      <description>Spreadsheets Spreadsheets are evil. And do you know why? Because they&#39;re too powerful. Here is the sweet spot of spreadsheets: tables of related data on which calculations need to be made. Here is not the sweet spot of spreadsheets: everything else.
Single Responsibility Principle Spreadsheet software is so powerful nowadays that you can make visualizations for almost anything. And some people are happy to spend a really long time creating and maintaing those, but I am WAY, WAY lazier than those people are.</description>
    </item>
    
  </channel>
</rss>