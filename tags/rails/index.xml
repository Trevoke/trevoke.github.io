<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Seven steps</title>
    <link>http://blog.trevoke.net/tags/rails/</link>
    <description>Recent content in rails on Seven steps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/trevoke&#34;&gt;Aldric Giacomoni&lt;/a&gt; 2017-2019</copyright>
    <lastBuildDate>Sat, 02 Feb 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.trevoke.net/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Is Rails dying?</title>
      <link>http://blog.trevoke.net/post/import-is-rails-dying-publish/</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.trevoke.net/post/import-is-rails-dying-publish/</guid>
      <description>More to the point, should Rails die?
Rails brought a lot of great things - it made it dumb easy to package an entire app together. It abstracted the complexity of the storage layer. It created an entire market. Things like Heroku, Railsonfire/codeship and other companies turned a profit by extending the benefits of Rails. And things like Capistrano were born.
Everything that can be automated should be automated.
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>Devise &#43; rspec error: undefined method &#39;name&#39;</title>
      <link>http://blog.trevoke.net/post/import-devise-rspec-error-undefined-method-name-publish/</link>
      <pubDate>Mon, 11 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.trevoke.net/post/import-devise-rspec-error-undefined-method-name-publish/</guid>
      <description>If you&#39;re using Devise and rspec on Rails 3, and you want to override a controller, and you end up with an error that makes no sense whatsoever:
1  Undefined method &amp;#39;name&amp;#39; for nil:NilClass   well then, you probably want to add the following line to your tests:
1  @request.env[&amp;#34;devise.mapping&amp;#34;] = Devise.mappings[:admin]   Yeah... That took me way longer than expected.
On a COMPLETELY UNRELATED SIDE NOTE, pry is pretty cool when you end up having to step through code.</description>
    </item>
    
    <item>
      <title>Calling Rake tasks within the Rails env</title>
      <link>http://blog.trevoke.net/post/import-open-source-is-wide-open-calling-rake-tasks-publish/</link>
      <pubDate>Tue, 15 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.trevoke.net/post/import-open-source-is-wide-open-calling-rake-tasks-publish/</guid>
      <description>Calling RAKE tasks within the Rails environment.
Good to know.</description>
    </item>
    
    <item>
      <title>Rails, HAML, alternatible CSS for tables</title>
      <link>http://blog.trevoke.net/post/import-rails-haml-alternatible-css-for-tables-publish/</link>
      <pubDate>Wed, 02 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://blog.trevoke.net/post/import-rails-haml-alternatible-css-for-tables-publish/</guid>
      <description>If you&#39;ve done any kind of table display in Rails, you&#39;ve probably discovered the useful &#39;cycle&#39; method:
&amp;lt;tr class=&amp;quot;&amp;lt;%= cycle(&amp;quot;even&amp;quot;, &amp;quot;odd&amp;quot;) %&amp;gt;&amp;quot;&amp;gt;
This works after you&#39;ve set two CSS classes between which you want to alternate - in my example, even and odd, because I have such amazing imagination. Come to think of it, to make my code more readable, it should be &#39;lightbg&#39; and &#39;darkbg&#39;, or something similar. I&#39;ll fix that.</description>
    </item>
    
  </channel>
</rss>