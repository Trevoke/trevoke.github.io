<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on Seven steps</title>
    <link>http://blog.trevoke.net/tags/agile/index.xml</link>
    <description>Recent content in Agile on Seven steps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/trevoke&#34;&gt;Aldric Giacomoni&lt;/a&gt; 2017</copyright>
    <atom:link href="http://blog.trevoke.net/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>      The value of estimates for a team</title>
      <link>http://blog.trevoke.net/post/the-value-of-estimates-for-a-team/</link>
      <pubDate>Thu, 02 Apr 2015 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/the-value-of-estimates-for-a-team/</guid>
      <description>&lt;h1 id=&#34;what-this-entry-is-and-is-not-about&#34;&gt;What this entry is and is not about&lt;/h1&gt;

&lt;p&gt;This entry talks about estimates in a relatively perfect world. This entry does &lt;em&gt;not&lt;/em&gt; talk about problems that teams run into when dealing with estimates in a world where estimates are often misunderstood and where parties try to pile up additional meanings and metrics to estimates.&lt;/p&gt;

&lt;h1 id=&#34;why-talk-about-estimating-at-all&#34;&gt;Why talk about estimating at all&lt;/h1&gt;

&lt;p&gt;Estimating work to be done before it is done. Great if you know what the work is. Software development teams often have no idea what the work really will be until they do it. Give a sculptor a block of wood and they&#39;ll have to work carefully, as they uncover the imperfections within the wood. How long will it take to reveal a bust of Artemis drawing an arrow? The sculptor doesn&#39;t really know beforehand.&lt;/p&gt;

&lt;p&gt;Yet, there is value in having a way to know at a grander scale how much work can be accomplished. Evaluating this allows us to discuss how much work can be done before a given deadline, as well as the overall health of the team (through &lt;strong&gt;changes to this measurement over time&lt;/strong&gt;).&lt;/p&gt;

&lt;h1 id=&#34;what-is-an-estimate&#34;&gt;What is an estimate&lt;/h1&gt;

&lt;p&gt;An estimate is a representation of the team&#39;s understanding of the complexity of the work required to accomplish a desired feature. Since it is done with imperfect knowledge, it will be wrong. That is why it is called an estimate.&lt;/p&gt;

&lt;p&gt;In order to separate the idea of estimate from the idea of &#34;how long this work will take&#34;, the estimate is not given in units of time (e.g. an hour, a day, two weeks...). Since the idea of an estimate is to represent complexity, time does not map well. Some teams use t-shirt sizes (S, M, L, XL), some teams use the Fibonacci series (1, 2, 3, 5, ...). Each unit of work would then be given such a &#34;size&#34;.&lt;/p&gt;

&lt;p&gt;An estimate can be understood, then, as a completely wrong and overall meaningless number. So why is this a good idea?&lt;/p&gt;

&lt;h1 id=&#34;estimates-over-time&#34;&gt;Estimates over time&lt;/h1&gt;

&lt;h2 id=&#34;the-velocity&#34;&gt;The velocity&lt;/h2&gt;

&lt;p&gt;When you have time boundaries (note: kanban users, this is your red flag), you can stack up the value of the estimates of the units of work accomplished over that period of time and get a number called &lt;strong&gt;velocity&lt;/strong&gt;. The velocity tells you how much complexity of work the team has gone through in a given period of time. Remember: this is all based on a number which we know to be wrong and meaningless, by definition.&lt;/p&gt;

&lt;p&gt;So far, this all sounds like a load of hard work for no reason at all. So why is this a good idea?&lt;/p&gt;

&lt;h2 id=&#34;attaining-self-consistency&#34;&gt;Attaining self-consistency&lt;/h2&gt;

&lt;p&gt;Over time, a team which is allowed to generate its own estimates based on the units of work they receive will gravitate towards a self-consistent system. This means that units of work will be understood to relate to each other based on complexity (e.g. &#34;Remember when we did X? This is the same kind of work, isn&#39;t it?&#34;)&lt;/p&gt;

&lt;p&gt;Over time, this means that velocity will also become consistent. It will become a wrong and meaningless number created from other wrong and meaningless numbers. However, at this point in time, the team has something it did not have before: self-consistency. The numbers will be wrong in the same way.&lt;/p&gt;

&lt;h1 id=&#34;the-value-of-self-consistent-estimates&#34;&gt;The value of self-consistent estimates&lt;/h1&gt;

&lt;p&gt;I have worked on teams where the velocity was 4 and teams where the velocity was 78. This means that over time, the stable number obtained based on accomplished work complexity during a unit of time turned out to &lt;strong&gt;predictably&lt;/strong&gt; be this number. This says &lt;em&gt;nothing&lt;/em&gt; about &#34;how fast&#34; or &#34;how slow&#34; the team got work done. It does mean that after estimating a new feature, the team could then have a conversation about the translation of that number to the unit of time.&lt;/p&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Team velocity&lt;/td&gt;
&lt;td&gt;Estimate for new feature&lt;/td&gt;
&lt;td&gt;Reasonable estimated time to completion&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;1/6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This can then lead to discussing scope. In the first case, that feature translates to a relatively short amount of time. In the second case, it is a choice that will have significant impact (no other work can happen during three units of time).&lt;/p&gt;

&lt;h1 id=&#34;how-estimates-fit-in-the-team-s-process-ecosystem&#34;&gt;How estimates fit in the team&#39;s process ecosystem&lt;/h1&gt;

&lt;p&gt;Estimates will always be wrong; that&#39;s why they&#39;re called estimates. As long as the team is allowed to estimate the work without external pressures, the team will eventually gravitate towards a self-consistent system of estimates. This means that while all estimates are always going to be wrong, they will be right &lt;strong&gt;relative to each other&lt;/strong&gt; and that is the only thing that matters. The velocity, built on top of this self-consistent system, is also a number which only makes sense in the system within which it was built, but which allows nonetheless effective conversations to happen and valuable data to be gathered.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>