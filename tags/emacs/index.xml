<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Seven steps</title>
    <link>http://blog.trevoke.net/tags/emacs/index.xml</link>
    <description>Recent content in Emacs on Seven steps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/trevoke&#34;&gt;Aldric Giacomoni&lt;/a&gt; 2017</copyright>
    <atom:link href="http://blog.trevoke.net/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>      Lesson from emacs: keep data easy to manipulate and easy to present</title>
      <link>http://blog.trevoke.net/post/separate-manipulation-from-presentation/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 -0500</pubDate>
      
      <guid>http://blog.trevoke.net/post/separate-manipulation-from-presentation/</guid>
      <description>&lt;h1 id=&#34;spreadsheets&#34;&gt;Spreadsheets&lt;/h1&gt;

&lt;p&gt;Spreadsheets are evil. And do you know why? Because they&#39;re too powerful. Here is the sweet spot of spreadsheets: &lt;strong&gt;tables of related data on which calculations need to be made&lt;/strong&gt;. Here is not the sweet spot of spreadsheets: &lt;strong&gt;everything else&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Spreadsheet software is so powerful nowadays that you can make visualizations for almost anything. And some people are happy to spend a really long time creating and maintaing those, but I am WAY, WAY lazier than those people are. I&#39;ve also learned that there was such a thing as the Single Responsibility Principle.&lt;/p&gt;

&lt;h1 id=&#34;single-responsibility-principle&#34;&gt;Single Responsibility Principle&lt;/h1&gt;

&lt;p&gt;The Single Responsibility Principle, in code, states that a class (or a function, or really any logical set of code) must have one and only one reason to change. This is very strong.&lt;/p&gt;

&lt;p&gt;Let&#39;s take a spreadsheet which is a visualization of a schedule. This spreadsheet can change if we&#39;re going to change the color a particular scheduled item, or the dates of the scheduled item, or who&#39;s doing the scheduled thing, or the granularity or the schedule, or something around a scheduled item. Not that I&#39;m counting, but I think that&#39;s more than one.&lt;/p&gt;

&lt;h2 id=&#34;separation-of-concerns&#34;&gt;Separation of concerns&lt;/h2&gt;

&lt;p&gt;Separating your concerns helps with that. Among other things, a single concern is, well, a single thing, so it helps make sure there&#39;s just one reason for a set of code to change. When I&#39;m looking at data, I&#39;ve basically got three concerns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Storing the data&lt;/li&gt;
&lt;li&gt;Manipulating the data&lt;/li&gt;
&lt;li&gt;Visualizing the data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I can find a way of storing the data in such  a way that manipulating it is about as painless as it gets, then I am much more likely to want to play with the data, and therefore I am much more likely to come to new realizations about it.&lt;/p&gt;

&lt;h1 id=&#34;emacs&#34;&gt;emacs&lt;/h1&gt;

&lt;p&gt;Emacs is a beast with many uses, but it is &lt;strong&gt;definitely&lt;/strong&gt; organized. And it is, of course, mostly about modifying plain-text, though it has a large support for richer formats. Many of the plain-text modes support exporting and converting to other formats, which is also a driving force behind many of the powerful use cases for emacs.&lt;/p&gt;

&lt;h2 id=&#34;org-mode&#34;&gt;org-mode&lt;/h2&gt;

&lt;p&gt;Enter org-mode.&lt;/p&gt;

&lt;p&gt;Org-mode is about organizing things. It&#39;s basically an outline mode with Getting Things Done features on crack. My favorite org-mode feature to date is how it handles tables, precisely because it is such a wonderful example of the separation of concerns that I&#39;m talking about here. Here&#39;s a small example.&lt;/p&gt;

&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;th&gt;Date of Birth&lt;/th&gt;
&lt;th&gt;Income&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;1984-02-20 Mon&gt;&lt;/td&gt;
&lt;td&gt;84000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mark&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;1974-04-15 Mon&gt;&lt;/td&gt;
&lt;td&gt;120000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sophie&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;&lt;1970-08-28 Fri&gt;&lt;/td&gt;
&lt;td&gt;150000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Anna&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;1988-02-29 Mon&gt;&lt;/td&gt;
&lt;td&gt;160000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here is how I wrote this table:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I typed |Name|Age|Date of Birth|Income| and then I pressed &lt;TAB&gt;&lt;/li&gt;
&lt;li&gt;I typed Joe, &lt;TAB&gt;, &lt;TAB&gt;, C-c . (Ctrl+C then the period character), which dropped me in emacs&#39; calendar, I wrote a date and pressed enter, then &lt;TAB&gt;&lt;/li&gt;
&lt;li&gt;I typed 84000 then I pressed &lt;TAB&gt;&lt;/li&gt;
&lt;li&gt;I repeated for the next lines&lt;/li&gt;
&lt;li&gt;I wrote the last line, a formula line, to calculate how old they are today, and pressed C-u C-c C-c, which is &#34;recalculate everything&#34;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And this is how it looked to me in plain text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
| Name   | Age | Date of Birth    | Income |
|--------+-----+------------------+--------|
| Joe    |  30 | &amp;lt;1984-02-20 Mon&amp;gt; |  84000 |
| Mark   |  40 | &amp;lt;1974-04-15 Mon&amp;gt; | 120000 |
| Sophie |  44 | &amp;lt;1970-08-28 Fri&amp;gt; | 150000 |
| Anna   |  26 | &amp;lt;1988-02-29 Mon&amp;gt; | 160000 |
#+TBLFM: $2=(now()-$3)/365;%d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important to note that emacs&#39; org-mode did all the row alignment for me. Honesty dictates that I mention I actually had to ask how to do the calculation &lt;a href=&#34;https://emacs.stackexchange.com/questions/7750/org-mode-in-a-table-calculate-a-persons-age-based-on-their-birthday&#34; title=&#34;here&#34;&gt;here&lt;/a&gt;, because I didn&#39;t know about the `now()` function.&lt;/p&gt;

&lt;p&gt;But let&#39;s say I realize that the date of birth is better before the age:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Date of Birth&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;th&gt;Income&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;&lt;1984-02-20 Mon&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;84000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mark&lt;/td&gt;
&lt;td&gt;&lt;1974-04-15 Mon&gt;&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;120000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sophie&lt;/td&gt;
&lt;td&gt;&lt;1970-08-28 Fri&gt;&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;150000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Anna&lt;/td&gt;
&lt;td&gt;&lt;1988-02-29 Mon&gt;&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;160000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here&#39;s how much work this was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the Age column&lt;/li&gt;
&lt;li&gt;Press Alt+Right&lt;/li&gt;
&lt;li&gt;Watch as the column moves and the formula is updated, all for me. (note in the example below how the formula changed!)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;
| Name   | Date of Birth    | Age | Income |
|--------+------------------+-----+--------|
| Joe    | &amp;lt;1984-02-20 Mon&amp;gt; |  30 |  84000 |
| Mark   | &amp;lt;1974-04-15 Mon&amp;gt; |  40 | 120000 |
| Sophie | &amp;lt;1970-08-28 Fri&amp;gt; |  44 | 150000 |
| Anna   | &amp;lt;1988-02-29 Mon&amp;gt; |  26 | 160000 |
#+TBLFM: $3=(now()-$2)/365;%d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now what if I want the names to be ordered alphabetically, like so?&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;th&gt;Date of Birth&lt;/th&gt;
&lt;th&gt;Income&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Anna&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;1988-02-29 Mon&gt;&lt;/td&gt;
&lt;td&gt;160000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Joe&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;1984-02-20 Mon&gt;&lt;/td&gt;
&lt;td&gt;84000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mark&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;1974-04-15 Mon&gt;&lt;/td&gt;
&lt;td&gt;120000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sophie&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;&lt;1970-08-28 Fri&gt;&lt;/td&gt;
&lt;td&gt;150000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;
| Name   | Age | Date of Birth    | Income |
|--------+-----+------------------+--------|
| Anna   |  26 | &amp;lt;1988-02-29 Mon&amp;gt; | 160000 |
| Joe    |  30 | &amp;lt;1984-02-20 Mon&amp;gt; |  84000 |
| Mark   |  40 | &amp;lt;1974-04-15 Mon&amp;gt; | 120000 |
| Sophie |  44 | &amp;lt;1970-08-28 Fri&amp;gt; | 150000 |
#+TBLFM: $2=(now()-$3)/365;%d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough! There&#39;s a function in org-mode called org-table-sort-lines that&#39;ll do it for me. And now I notice that when I made up the data for this table, as the names go up in the alphabet, so do the ages go up. Yet, even if I did not know about it, I could have just done the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to a row&lt;/li&gt;
&lt;li&gt;Press Alt-Up or Alt-Down to move it up or down&lt;/li&gt;
&lt;li&gt;Repeat until rows are organized as I wish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And do you know how much work it was to transform all this plain text into the HTML you&#39;re reading? Barely any, in large part because the blogging engine I use is an emacs package.&lt;/p&gt;

&lt;p&gt;The beautiful thing about this is: if I find that I need to reorganize my sections, I can equally simply use Alt-Up or Alt-Down to move them, along with all the text below it, up or down. And then I can re-generate the HTML.&lt;/p&gt;

&lt;p&gt;I do the work I want to do in plain-text, because it can be made very easy to manipulate, and then we come up with a powerful visualization. The visualization is only for reading, not for manipulating. A visualization is generated, but otherwise generally static&lt;/p&gt;

&lt;h2 id=&#34;other-examples-of-visualization-or-otherwise-human-readable-data-unsuited-for-manipulation&#34;&gt;Other examples of visualization or otherwise human-readable data, unsuited for manipulation&lt;/h2&gt;

&lt;p&gt;My favorite other example is SQL versus key-value stores. The fairly famous D3.js library is also a good example.&lt;/p&gt;

&lt;h1 id=&#34;back-to-spreadsheets&#34;&gt;Back to spreadsheets&lt;/h1&gt;

&lt;p&gt;Use spreadsheets, but only to learn things about your data. Then find a visualization that makes sense, and generate it based on your data. You&#39;ll be much happier in the long run. I promise.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>